package com.automic.app.activity;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;

import com.automic.app.R;
import com.automic.app.adapter.WarnWaterElecRatioAdapter;
import com.automic.app.bean.WaterElecRatioWarn;
import com.automic.app.utils.LogUtils;
import com.automic.app.utils.ToastUtils;
import com.automic.app.view.pullpushview.PullToRefreshLayout;
import com.automic.app.view.pullpushview.PullableListView;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.common.Callback;
import org.xutils.http.RequestParams;
import org.xutils.x;

import java.util.ArrayList;
import java.util.List;

import static com.automic.app.bean.Constant.BASEIP;

/**
 * 类注释：水电配比异常报警
 * Created by sujingtai on 2017/4/10 0010 下午 7:56
 */

public class WaterElecRatioWarnActivity extends BaseActivityWarn {
    private List<WaterElecRatioWarn> mList=new ArrayList<WaterElecRatioWarn>();
    private int currentPage=1;
    private String TAG="WaterElecRatioWarnActivity";
    private Context mContext;
    private PullToRefreshLayout pullToRefreshLayout;
    private PullableListView lv;
    private String cunId;//弹框内部村id
    private  String sContent;//搜索框内容
    private List<WaterElecRatioWarn> listCache=new ArrayList<WaterElecRatioWarn>();
    private WarnWaterElecRatioAdapter adapter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_openbox);
        String wellNos=  getIntent().getStringExtra("wellNos");
        mContext = WaterElecRatioWarnActivity.this;
        setupView();
        setTitlebar("水电配比报警");
        LogUtils.e(TAG,"wellnos==="+wellNos);
        //wellNos="654003001006, 654003001004";//测试井号
        if (wellNos!=null){
            queryWarnWellByType(wellNos,"waterElecAbnormal");
        }
    }

    @Override
    protected void getWellInfoByScontent(String sContent) {
        this.sContent=sContent;
        mList.clear();
        getWellInfo(sContent,false,true);
    }

    @Override
    protected void getWellInfoByCunId(String cunId) {
        this.cunId = cunId;
        mList.clear();
        getWellInfo(cunId, true, false);
    }


    private void setupView() {
        pullToRefreshLayout = (PullToRefreshLayout) findViewById(R.id.pl_refresh_openbox);
        pullToRefreshLayout.setOnRefreshListener(new MyListener());
        lv = (PullableListView) pullToRefreshLayout.findViewById(R.id.lv_info_openbox);
    }
    /**
     * 得到井的信息 此处是得到水电异常的井
     * @param content 查询内容
     * @param fromCunid 是否从村列表获取content
     * @param fromScontent 是否从搜索框中获取content
     */
    protected void getWellInfo(String content, boolean fromCunid, boolean fromScontent) {
        String url = BASEIP+"/well/queryWaterElecValue";
        RequestParams requestParams = new RequestParams(url);
        requestParams.addBodyParameter("userId", "admin");
        requestParams.addBodyParameter("eventType", "waterElecAbnormal");//传了后台也没处理
        if (fromCunid)
            requestParams.addBodyParameter("areaCode", content);
        if (fromScontent)
            requestParams.addBodyParameter("sContent", content);
        requestParams.addParameter("currentPage", currentPage);
        requestParams.addBodyParameter("count", "10");

        x.http().get(requestParams, new Callback.CommonCallback<String>() {
            @Override
            public void onSuccess(String result) {
                getDataSuccessed(result);
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                ToastUtils.show(mContext,"服务器异常");
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }
        });
    }

    /**
     * 按报警类型查询报警列表（井列表）
     * 接口为开发（平台）
     */
    private void queryWarnWellByType(String wellNos,String type){
        String url=BASEIP+"/well/queryWarnWellByType";
        RequestParams params=new RequestParams(url);
        params.addBodyParameter("userId","admin");
        params.addBodyParameter("wellNos",wellNos);//机井编码集合
        params.addBodyParameter("type",type);
        params.addParameter("currentPage",1);
        params.addParameter("count",20);
        x.http().get(params, new Callback.CommonCallback<String>() {
            @Override
            public void onSuccess(String result) {
                getDataSuccessed(result);
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                ToastUtils.show(mContext,"服务器异常");
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }
        });
    }
    /**
     * 上拉和下拉刷新监听器
     */
    public boolean isFresh=false;
    private class MyListener implements PullToRefreshLayout.OnRefreshListener {
        @Override
        public void onRefresh(final PullToRefreshLayout pullToRefreshLayout) {
            new Handler() {

                @Override
                public void handleMessage(Message msg) {
                    //下拉刷新操作
                    if (mList.size()!=0){
                        currentPage = 1;
                        isFresh=true;
                        if (flagQueryCun)
                            getWellInfo(cunId,true,false);
                        if (flagSearch)
                            getWellInfo(sContent,false,true);
                    }
                    //千万别忘了告诉控件刷新完毕了哦!
                    pullToRefreshLayout.refreshFinish(PullToRefreshLayout.SUCCEED);
                }
            }.sendEmptyMessageDelayed(0, 500);
        }

        @Override
        public void onLoadMore(final PullToRefreshLayout pullToRefreshLayout) {
            new Handler() {
                @Override
                public void handleMessage(Message msg) {
                    //加载操作
                    if (mList.size()!=0){
                        currentPage++;
                        isFresh=false;
                        if (flagQueryCun)
                            getWellInfo(cunId,true,false);
                        if (flagSearch)
                            getWellInfo(sContent,false,true);
                    }

                    // 千万别忘了告诉控件加载完毕了哦！
                    pullToRefreshLayout.loadmoreFinish(PullToRefreshLayout.SUCCEED);
                }
            }.sendEmptyMessageDelayed(0, 500);
        }
    }
    private void getDataSuccessed(String result){
        try {
            JSONObject jsonResult = new JSONObject(result);
            int code = jsonResult.getInt("code");
            if (code == 1) {
                if (isFresh){
                    mList.clear();
                    isFresh=false;
                }
                Gson gson = new Gson();
                String data = jsonResult.getString("result");
                LogUtils.e("sjt", "返回数据" + data);
                listCache=gson.fromJson(data,new TypeToken<List<WaterElecRatioWarn>>(){}.getType());
                mList.addAll(listCache);
                listCache.clear();//本次清空缓存
                adapter = new WarnWaterElecRatioAdapter(mContext, mList);
                lv.setAdapter(adapter);
                adapter.notifyDataSetChanged();
            }else{
                if (mList.size()==0){
                    ToastUtils.show(mContext,"查询不到数据");
                    adapter=new WarnWaterElecRatioAdapter(mContext,mList);
                    adapter.notifyDataSetChanged();
                }else{
                    ToastUtils.show(mContext,"已经加载到底了");
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        } finally {
        }
    }
}
