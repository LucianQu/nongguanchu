package com.automic.app.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.MotionEvent;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.AMapOptions;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.MapView;
import com.amap.api.maps2d.UiSettings;
import com.amap.api.maps2d.model.BitmapDescriptorFactory;
import com.amap.api.maps2d.model.LatLng;
import com.amap.api.maps2d.model.Marker;
import com.amap.api.maps2d.model.MarkerOptions;
import com.automic.app.R;
import com.automic.app.bean.Area;
import com.automic.app.bean.GaodeMapWellInfo;
import com.automic.app.bean.WellInfo;
import com.automic.app.utils.LogUtils;
import com.automic.app.utils.ToastUtils;
import com.automic.app.view.AddPopWindow;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.common.Callback;
import org.xutils.http.RequestParams;
import org.xutils.x;

import java.util.ArrayList;
import java.util.List;

import static com.automic.app.bean.Constant.BASEIP;

/**
 * Created by qulus on 2017/3/27 0027.
 */

public class GaodeMapActivity extends AppCompatActivity implements AMap.OnMarkerClickListener,
        AMap.OnInfoWindowClickListener,AMap.InfoWindowAdapter,AMap.OnMapClickListener,
        AddPopWindow.Choice,View.OnClickListener,AMap.OnMapLoadedListener {
    private String TAG = "GaodeMapActivity" ;
    private MapView m_mapView;
    private AMap m_aMap;
    private UiSettings mUiSettings;
    private View m_markerInfoWindow = null;
    public WellInfo m_wLBean;
    private ArrayList<MarkerOptions> m_mOptionsList = new ArrayList<>();
    private ArrayList<Marker> m_markerList = new ArrayList<>();

    private String m_wellNo = "";
    private String m_wellName = "";
    private String m_wellUser = "";

    private TextView m_tvXiang ;
    private AddPopWindow m_ppwXiang ;
    private TextView m_tvCun ;
    private AddPopWindow m_ppwCun ;
    private List<Area> m_areaBeanXiangList = new ArrayList<>();
    private List<Area> m_areaBeanCunList = new ArrayList<>();
    public  List<WellInfo> m_wLBeanList = new ArrayList<WellInfo>();
    private boolean isQueryX = false ;
    private int currentPage = 1 ;
    private Context m_context ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_show_map);
        m_context = GaodeMapActivity.this ;
        m_mapView = (MapView) findViewById(R.id.map);//初始化地图控件
        m_mapView.onCreate(savedInstanceState);//必须要写

        init();
        //initMap();//初始化高德地图
        removeMarkerList(); //移除地图所有marker
        getExtrasMapData();//获取从其他Activity传过来的地图数据
        setupTitleListener() ;//设置标题监听
        getXiangCunData(true,"") ;
   /*     m_aMap.setOnMarkerClickListener(markerClickListener);
        m_aMap.setInfoWindowAdapter(infoWindowAdapter);
        m_aMap.setOnInfoWindowClickListener(infoWindowListener);*/

    }

    private void setupTitleListener() {
        m_tvXiang = (TextView) findViewById(R.id.tvw_spinner_xiang) ;
        m_tvXiang.setOnClickListener(this);
        m_tvCun = (TextView) findViewById(R.id.tvw_spinner_cun) ;
        m_tvCun.setOnClickListener(this);
    }

    private void initMap() {


        m_aMap = m_mapView.getMap();
        m_aMap.getUiSettings().setMyLocationButtonEnabled(false);
        m_aMap.setMyLocationEnabled(false);
    }
    /**
     * 初始化AMap对象
     */
    private void init() {
        if (m_aMap == null) {
            m_aMap = m_mapView.getMap();
            mUiSettings = m_aMap.getUiSettings();
            mUiSettings.setZoomControlsEnabled(true);
            mUiSettings.setZoomPosition(AMapOptions.ZOOM_POSITION_RIGHT_CENTER);

        }
        m_aMap.setOnMapLoadedListener(this);// 设置amap加载成功事件监听器
        m_aMap.setInfoWindowAdapter(this);// 设置自定义InfoWindow样式
        m_aMap.setOnMapTouchListener(new AMap.OnMapTouchListener() {

            @Override
            public void onTouch(MotionEvent motionEvent) {

            }
        });
        m_aMap.setOnInfoWindowClickListener(new AMap.OnInfoWindowClickListener() {

            @Override
            public void onInfoWindowClick(Marker marker) {
                marker.hideInfoWindow();
            }

        });

        m_aMap.setOnMapClickListener(new AMap.OnMapClickListener() {

            @Override
            public void onMapClick(LatLng arg0) {
                for (int i = 0; i < m_aMap.getMapScreenMarkers().size(); i++) {
                    m_aMap.getMapScreenMarkers().get(i).hideInfoWindow();
                }
            }

        });
    }


    private void getExtrasMapData() {
        Intent intent = getIntent();
        Bundle bundle = intent.getExtras();
        if(null == bundle) {
            ToastUtils.show(GaodeMapActivity.this,"地图数据为空!");
        }else {
            //m_wLBeanList = bundle.getParcelableArrayList("GaodeMapWellInfo") ;
            m_wLBeanList = (List<WellInfo>) bundle.getSerializable("GaodeMapWellInfo") ;
            addMarkerList(WellLocatBeanList2MarkerOptionsList(m_wLBeanList, m_mOptionsList), m_wLBeanList.size() - 1);
            bundle.remove("GaodeMapWellInfo");
        }
    }



    /**
     * @param v 点击返回
     */
    public void onReturnClick(View v) {
        Activity parent = this.getParent();
        if (parent != null) {
            parent.finish();
        } else {
            this.finish();
        }
    }
    /**
     *@declare  把从其他activity获取的wellBeanList转换成标记集合
     *@param    wellBeanList,markerOptionsList
     *@return   标记集合;
     */
    public ArrayList<MarkerOptions> WellLocatBeanList2MarkerOptionsList(List<WellInfo> wellBeanList,
                                                                        ArrayList<MarkerOptions> markerOptionsList) {
        if (wellBeanList == null || wellBeanList.size() == 0) {
            Toast.makeText(GaodeMapActivity.this, "WellListBean集合为空!",Toast.LENGTH_SHORT).show();
            return null;
        }
        if(markerOptionsList != null && markerOptionsList.size() > 0) {
            for (int i = 0; i < markerOptionsList.size(); i++) {
                markerOptionsList.remove(i);
            }
        }

        for (int i = 0; i < wellBeanList.size(); i++) {
            m_wLBean = wellBeanList.get(i);
            WellInfoWindowSet(m_wLBean.getWellNo(), m_wLBean.getWellName(),
                     m_wLBean.getAdmin());

            markerOptionsList.add(customMarker(m_wLBean.getWellNo(), m_wLBean.getWellName(),
                    R.mipmap.gaode_well_64_, m_wLBean.getWellLat(),m_wLBean.getWellLong()));

            LogUtils.e(TAG, "机井标记信息:" + "   机井编码 " + m_wellNo + ",   机井名称 " + m_wellName +",   用户 "
            + m_wellUser + ",   纬度 " + m_wLBean.getWellLat() +",   经度 " + m_wLBean.getWellLong());
        }
        return markerOptionsList;
    }

    /**
     *@declare  markerOptions属性设置
     *@param    title:标记的标题, snippet:标记内容, icon:标记图标, v:纬度 v1:经度
     *@return   标记
     */
    public MarkerOptions customMarker(String title, String snippet, int icon, double v, double v1) {
        MarkerOptions markerOptions = new MarkerOptions() ;
        markerOptions.position(new LatLng(v,v1)) ;//在地图上标记位置的经纬度值
        markerOptions.title(title) ;//点标记的标题
        markerOptions.snippet(snippet) ;//点标记的内容
        //markerOptions.perspective(true) ;
        markerOptions.visible(true);//点标记是否可见
        markerOptions.draggable(true) ;//点标记是否可拖拽
        //markerOptions.setFlat(true) ;//设置Marker贴地显示,可以双指下拉地图查看效果
        markerOptions.icon(BitmapDescriptorFactory.fromResource(icon)) ;
        //markerOptions.setInfoWindowOffset(30,0) ;
        return markerOptions;
    }

    /**
     *@declare  把marker list添加到地图中,并设置显示某个marker信息窗口
     *@param    markerOptionsList:marker list, defultMarkPosition: 默认marker位置
     *@return
     */
    public void addMarkerList(ArrayList<MarkerOptions> markerOptionsList , int defaultMarkPosition) {
        if (markerOptionsList == null) {
            return;
        }
        if(m_markerList != null || m_markerList.size() > 0) {
            for (int i = 0; i < markerOptionsList.size(); i++) {
                m_markerList.add(m_aMap.addMarker(markerOptionsList.get(i)));
            }
        }
        //m_markerList = m_aMap.addMarkers(markerOptionsList,true) ;
        setDefaultMarkDisplayInfo(defaultMarkPosition) ;
    }
    /**
     *@declare  设置默认marker显示信息窗口
     *@param    position:marker在marker集合中的位置
     *@return
     */
    public void setDefaultMarkDisplayInfo(int position) {
        if(position < 0)
            return;
        WellInfoWindowSet(m_markerList.get(position).getTitle(),m_markerList.get(position).getSnippet(),
                m_wLBeanList.get(position).getAdmin());


        m_markerList.get(position).showInfoWindow();

        m_aMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(m_markerList.get(position).
                getPosition().latitude, m_markerList.get(position).getPosition().longitude), 10));

    }
    /**
     *@declare  移除地图上所有marker
     *@param
     *@return
     */
    public void removeMarkerList() {

        if(m_wLBeanList == null || m_wLBeanList.size() <= 0) {
            for (int i = 0; i < m_wLBeanList.size(); i++) {
                m_wLBeanList.remove(i);
            }
        }
        List<Marker> saveMarkerList = m_aMap.getMapScreenMarkers() ;
        if(saveMarkerList == null || saveMarkerList.size() <= 0)
            return;
        for (Marker marker : saveMarkerList) {
            marker.hideInfoWindow();
            marker.remove();

        }

    }

    /**
     *@declare  自定义marker信息窗口
     *@param    marker:当前marker
     *@return   自定义的信息窗口视图
     */
    AMap.InfoWindowAdapter infoWindowAdapter = new AMap.InfoWindowAdapter() {
        @Override
        public View getInfoWindow(Marker marker) {
            m_markerInfoWindow = GaodeMapActivity.this.getLayoutInflater().
                    inflate(R.layout.activity_gaodemap_infowindows,null) ;//自定义视图layout
            Render(m_markerInfoWindow) ;
            return m_markerInfoWindow;
        }

        @Override
        public View getInfoContents(Marker marker) {
            return null;
        }
    };

    /**
     *@declare  获取机井信息Layout,并赋值
     *@param    view:m_markerInfoWindow
     *@return
     */
    public void Render(View view) {
        TextView wellNo = (TextView) view.findViewById(R.id.markerWellNo) ;
        TextView wellName = (TextView) view.findViewById(R.id.markerWellName) ;
        TextView wellUser = (TextView) view.findViewById(R.id.markerWellUser) ;

        wellNo.setText(m_wellNo);
        wellName.setText(m_wellName);
        wellUser.setText(m_wellUser);
    }

    /**
     *@declare  机井信息赋值
     *@param    wellNo:机井编码,wellName:机井名称,wellUser:机井户主
     *@return
     */
    public  void WellInfoWindowSet(String wellNo, String wellName, String wellUser) {
        m_wellNo = wellNo ;
        m_wellName = wellName ;
        m_wellUser = wellUser ;
    }

    AMap.OnMarkerClickListener markerClickListener = new AMap.OnMarkerClickListener(){
        @Override
        public boolean onMarkerClick(Marker marker) {
            WellInfoWindowSet(marker.getTitle(),marker.getSnippet(),getWellUser(marker)) ;
            //setDefaultMarkDisplayInfo(getMarkerPosition(marker));
            return false ;
        }
    };

    /**
     *@declare  获取用户信息,wellNo放在marker Title中,wellName放在marker Snippet中,wellUser从wLBeanList中获取
     *@param
     *@return   用户
     */
    private String getWellUser(Marker marker){
        boolean isExist = false ;
        int markerPosition = 0;
        String userName ;
        for (int i = 0; i < m_markerList.size(); i++) {
            if(marker.equals(m_markerList.get(i))) {
                isExist = true ;
                markerPosition = i ;
            }
        }
        if(isExist) {
            userName = m_wLBeanList.get(markerPosition).getAdmin() ;
        }else {
            userName = "" ;
        }
        return userName ;
    }

    /**
     *
     */
    private int getMarkerPosition(Marker marker) {
        int markerPosition = 0;
        for (int i = 0; i < m_markerList.size(); i++) {
            if(marker.equals(m_markerList.get(i))) {
                markerPosition = i ;
            }
        }
        return markerPosition ;
    }

    /**
     *@declare  信息窗口监听
     *@param
     */
    AMap.OnInfoWindowClickListener infoWindowListener = new AMap.OnInfoWindowClickListener() {
        @Override
        public void onInfoWindowClick(Marker marker) {
            //WellInfoWindowSet(marker.getTitle(),marker.getSnippet(),getWellUser(marker)) ;
        }
    };

    /**
     *@declare  onResume方法必须重写
     *@param
     */
    @Override
    protected void onResume() {
        super.onResume();
        m_mapView.onResume();
    }

    /**
     *@declare  onPause方法必须重写
     *@param
     */
    @Override
    protected void onPause() {
        super.onPause();
        m_mapView.onPause();
    }
    /**
     *@declare  onSaveInstanceState方法必须重写
     *@param
     */
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        m_mapView.onSaveInstanceState(outState);
    }

    /**
     *@declare  onDestroy方法必须重写
     *@param
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        m_mapView.onDestroy();
    }

    @Override
    public void onInfoWindowClick(Marker marker) {
        WellInfoWindowSet(marker.getTitle(),marker.getSnippet(),getWellUser(marker)) ;
    }

    @Override
    public View getInfoWindow(Marker marker) {
        m_markerInfoWindow = GaodeMapActivity.this.getLayoutInflater().
                inflate(R.layout.activity_gaodemap_infowindows,null) ;//自定义视图layout
        Render(m_markerInfoWindow) ;
        return m_markerInfoWindow;
    }

    @Override
    public View getInfoContents(Marker marker) {

        return null;
    }

    @Override
    public void onMapClick(LatLng latLng) {}

    @Override
    public boolean onMarkerClick(Marker marker) { return false;}

    ////////////////////////////////
    /**
     *获取村/乡数据
     */
    private void getXiangCunData(final boolean isXiang, String areaId) {
        String url = BASEIP + "/area/queryArea" ;
        if (null == areaId) {
            ToastUtils.show(GaodeMapActivity.this, "域ID为空!");
            return;
        }
        RequestParams requestParams = new RequestParams(url) ;
        requestParams.addBodyParameter("userId", "admin") ;
        if (!isXiang)
            requestParams.addBodyParameter("parentAreaID", areaId);
        x.http().post(requestParams, new Callback.CommonCallback<String>() {
            @Override
            public void onSuccess(String result) {
                try {
                    JSONObject jsonResult = new JSONObject(result) ;
                    int code = jsonResult.getInt("code") ;
                    if (code == 1) {
                        Gson gson = new Gson() ;
                        String data = jsonResult.getString("result") ;
                        LogUtils.e("GaodeActivity", "返回数据" + data);
                        if (isXiang) {
                            m_areaBeanXiangList = gson.fromJson(data,
                                    new TypeToken<List<Area>>() {}.getType()) ;
                            List<String> dataCache = new ArrayList<String>() ;
                            for (Area area : m_areaBeanXiangList) {
                                dataCache.add(area.getArea());
                            }
                            m_ppwXiang = new AddPopWindow(GaodeMapActivity.this, dataCache) ;
                            m_ppwXiang.setChoice(GaodeMapActivity.this);
                        }else {
                            m_areaBeanCunList = gson.fromJson(data,
                                    new TypeToken<List<Area>>() {}.getType()) ;
                            List<String> dataCache = new ArrayList<String>() ;
                            for (Area area : m_areaBeanCunList) {
                                dataCache.add(area.getArea());
                            }
                            m_ppwCun = new AddPopWindow(GaodeMapActivity.this, dataCache) ;
                            m_ppwCun.setChoice(GaodeMapActivity.this);
                        }
                    }else {
                        ToastUtils.show(GaodeMapActivity.this, "没有数据!");
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {

            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }
        });
    }

    /**
     *获取村井数据
     *
     */
    private void getWellInfoData(String areaCode) {
        String url = BASEIP + "/well/searchWellInfo" ;
        RequestParams requestParams = new RequestParams(url) ;
        requestParams.addBodyParameter("userId", "admin");
        requestParams.addBodyParameter("areaCode", areaCode);
        requestParams.addParameter("currentPage", currentPage);
        requestParams.addBodyParameter("count", "10");

        x.http().post(requestParams, new Callback.CommonCallback<String>() {
            @Override
            public void onSuccess(String result) {
                try {
                    JSONObject jsonResult = new JSONObject(result) ;
                    int code = jsonResult.getInt("code") ;
                    if (code == 1) {
                        Gson gson = new Gson() ;
                        String data = jsonResult.getString("result") ;
                        LogUtils.e("GaodeMapActivity_WellInfo", "返回数据" + data);
                        removeMarkerList();
                        m_wLBeanList = gson.fromJson(data,
                                new TypeToken<List<WellInfo>>() {}.getType()) ;

                        addMarkerList(WellLocatBeanList2MarkerOptionsList(m_wLBeanList, m_mOptionsList), m_wLBeanList.size() - 1);
                    }else {
                        ToastUtils.show(m_context,"井数据为空!");
                        m_aMap.clear();

                        initMap();
                        removeMarkerList();
                        for (int i = 0; i < 9; i++) {
                            m_wLBeanList.add(new WellInfo("大宝井", "233444323", "李三三", 0, "发电机房村", 12.3 + i*0.01, 116.6, "56", "78", "77", "34", "907"));
                        }
                        addMarkerList(WellLocatBeanList2MarkerOptionsList(m_wLBeanList, m_mOptionsList), m_wLBeanList.size() - 1);

                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                ToastUtils.show(m_context,"查询失败!");
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }
        });
    }


    @Override
    public void senddata(String msg) {
        int position = Integer.parseInt(msg) ;
        if (isQueryX) {
            isQueryX = false ;
            m_tvXiang.setText(m_areaBeanXiangList.get(position).getArea());
            getXiangCunData(false, m_areaBeanXiangList.get(position).getAreaId());
        }else {
            m_tvCun.setText(m_areaBeanCunList.get(position).getArea());
            getWellInfoData(m_areaBeanCunList.get(position).getAreaId());
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tvw_spinner_xiang:
                isQueryX = true;
                if (m_areaBeanXiangList.size() != 0)
                    m_ppwXiang.showPopupWindow(m_tvXiang);
                break;
            case R.id.tvw_spinner_cun:
                isQueryX = false ;
                if (m_areaBeanCunList.size() != 0)
                    m_ppwCun.showPopupWindow(m_tvCun);
                break;
        }
    }

    @Override
    public void onMapLoaded() {

    }
}
